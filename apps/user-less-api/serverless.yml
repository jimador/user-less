service: user-less-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    stages:
      - dev
      - test
    seed:
      dev:
        sources:
          - table: User
            sources: [seed/Users.json]

package:
  individually: true
  excludeDevDependencies: true
  # path: dist/apps/user-less-api
#  custom:
#    enable_optimize:
#      local: false

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '*'

functions:
  user-management:
    handler: src/handler.graphql
    events:
      - http:
          path: graphql
          method: get
      - http:
          path: graphql
          method: post

resources:
  Resources:
    User:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: User
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

ServiceRole:
  Type: "AWS::IAM::Role"
  Properties:
    RoleName: "DynamoRole"
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
    Policies:
      - PolicyName: "Dynamo-ServiceRole-Policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:BatchWriteItem"
                - "dynamodb:GetItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:PutItem"
                - "dynamodb:Scan"
                - "dynamodb:UpdateItem"
              Resource:
                - "arn:aws:dynamodb:us-east-1:*:table/User"
                - "arn:aws:dynamodb:us-east-1:*:table/User/*"
